@header {import org.StructureGraphic.v1.DSTreeNode;

import java.awt.*;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;}

@members {    public class Tree implements DSTreeNode {
                  private String nodeName;
                  private List<Tree> children;

                  public Tree(String nodeName, Tree... children) {
                      this.nodeName = nodeName;
                      this.children = Arrays.asList(children);
                  }

                  public Tree(String nodeName) {
                      this.nodeName = nodeName;
                  }

                  @Override
                  public String toString() {
                      if (children == null) {
                          return nodeName;
                      }

                      StringBuilder builder = new StringBuilder();
                      builder.append("(" + nodeName);

                      for (Tree child : children) {
                          builder.append(" " + child);
                      }
                      builder.append(")");
                      return builder.toString();
                  }

                  @Override
                  public DSTreeNode[] DSgetChildren() {
                      return children != null ? children.toArray(new DSTreeNode[children.size()]) : new DSTreeNode[0];
                  }

                  @Override
                  public Object DSgetValue() {
                      return nodeName;
                  }

                  @Override
                  public Color DSgetColor() {
                      return children == null ? Color.RED : null;
                  }
              }
}

pascal_exp returns [ Tree ] : boolexp { return new Tree("pascal_exp", $boolexp.tree); } ;

boolexp returns [ Tree ] : term boolexp_prime { return new Tree("boolexp", $term.tree, $boolexp_prime.tree); } ;
boolexp_prime returns [ Tree ] : OR term boolexp_prime { return new Tree("boolexp_prime", new Tree("OR"), $term.tree, $boolexp_prime.tree); } | XOR term boolexp_prime { return new Tree("boolexp_prime", new Tree("XOR"), $term.tree, $boolexp_prime.tree); } | ;

term returns [ Tree ] : factor term_prime { return new Tree("term", $factor.tree, $term_prime.tree); };
term_prime returns [ Tree ] : AND factor term_prime { return new Tree("term_prime", new Tree("AND"), $factor.tree, $term_prime.tree); }| ;

factor returns [ Tree ] :  VAR  { return new Tree("factor", new Tree("VAR")); } | NOT factor { return new Tree("factor", new Tree("NOT"), $factor.tree); } |  LEFT_PAREN boolexp RIGHT_PAREN { return new Tree("factor", new Tree("("), $boolexp.tree, new Tree(")")); };

VAR : 'a' | 'b' | 'c' | 'd' ;
AND : 'and' ;
OR : 'or' ;
XOR : 'xor' ;
NOT : 'not' ;
LEFT_PAREN : '(';
RIGHT_PAREN : ')';
